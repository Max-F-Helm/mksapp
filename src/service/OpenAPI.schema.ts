/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/records/20201217-oeaw-schlager-db": {
    /** list 20201217-oeaw-schlager-db */
    get: operations["list_20201217-oeaw-schlager-db"];
  };
  "/records/20201217-oeaw-schlager-db/{id}": {
    /** read 20201217-oeaw-schlager-db */
    get: operations["read_20201217-oeaw-schlager-db"];
  };
  "/records/city": {
    /** list city */
    get: operations["list_city"];
  };
  "/records/city/{id}": {
    /** read city */
    get: operations["read_city"];
  };
  "/records/collection": {
    /** list collection */
    get: operations["list_collection"];
  };
  "/records/collection/{id}": {
    /** read collection */
    get: operations["read_collection"];
  };
  "/records/genre": {
    /** list genre */
    get: operations["list_genre"];
  };
  "/records/genre/{id}": {
    /** read genre */
    get: operations["read_genre"];
  };
  "/records/person": {
    /** list person */
    get: operations["list_person"];
  };
  "/records/person/{id}": {
    /** read person */
    get: operations["read_person"];
  };
  "/records/publisher": {
    /** list publisher */
    get: operations["list_publisher"];
  };
  "/records/publisher/{id}": {
    /** read publisher */
    get: operations["read_publisher"];
  };
  "/records/song": {
    /** list song */
    get: operations["list_song"];
  };
  "/records/song/{id}": {
    /** read song */
    get: operations["read_song"];
  };
  "/records/source": {
    /** list source */
    get: operations["list_source"];
  };
  "/records/source/{id}": {
    /** read source */
    get: operations["read_source"];
  };
  "/records/x_collection_song": {
    /** list x_collection_song */
    get: operations["list_x_collection_song"];
  };
  "/records/x_composer_song": {
    /** list x_composer_song */
    get: operations["list_x_composer_song"];
  };
  "/records/x_cover_artist_song": {
    /** list x_cover_artist_song */
    get: operations["list_x_cover_artist_song"];
  };
  "/records/x_genre_song": {
    /** list x_genre_song */
    get: operations["list_x_genre_song"];
  };
  "/records/x_performer_song": {
    /** list x_performer_song */
    get: operations["list_x_performer_song"];
  };
  "/records/x_publication_place_song": {
    /** list x_publication_place_song */
    get: operations["list_x_publication_place_song"];
  };
  "/records/x_publisher_song": {
    /** list x_publisher_song */
    get: operations["list_x_publisher_song"];
  };
  "/records/x_source_song": {
    /** list x_source_song */
    get: operations["list_x_source_song"];
  };
  "/records/x_writer_song": {
    /** list x_writer_song */
    get: operations["list_x_writer_song"];
  };
  "/status/ping": {
    /** Request API 'ping' status */
    get: operations["ping_status"];
  };
}

export interface components {
  schemas: {
    "list-20201217-oeaw-schlager-db": {
      results?: number;
      records?: {
        id?: number;
        Titel?: string | null;
        "Komponist 1"?: string | null;
        "Komponist 2"?: string | null;
        "Komponist 3"?: string | null;
        "Komponist 4"?: string | null;
        "Texter 1"?: string | null;
        "Texter 2"?: string | null;
        "Texter 3"?: string | null;
        "Texter 4"?: string | null;
        Copyright?: string | null;
        Copyrightvermerk?: string | null;
        Entstehung?: string | null;
        Graphiker?: string | null;
        Interpreten?: string | null;
        "Interpret 2"?: string | null;
        "Interpret 3"?: string | null;
        "Interpret 4"?: string | null;
        "Interpret 5"?: string | null;
        "Interpret 6"?: string | null;
        Label?: string | null;
        Verlag?: string | null;
        Verlagsort?: string | null;
        Verlagsreihe?: string | null;
        Verlagsnummer?: string | null;
        "Plattennr."?: string | null;
        Herkunft?: string | null;
        Gattung?: string | null;
        Widmung?: string | null;
        Sammlungen?: string | null;
        Kritik?: string | null;
        Ergänzung?: string | null;
        Quelle?: string | null;
        Index?: string | null;
      }[];
    };
    "read-20201217-oeaw-schlager-db": {
      id?: number;
      Titel?: string | null;
      "Komponist 1"?: string | null;
      "Komponist 2"?: string | null;
      "Komponist 3"?: string | null;
      "Komponist 4"?: string | null;
      "Texter 1"?: string | null;
      "Texter 2"?: string | null;
      "Texter 3"?: string | null;
      "Texter 4"?: string | null;
      Copyright?: string | null;
      Copyrightvermerk?: string | null;
      Entstehung?: string | null;
      Graphiker?: string | null;
      Interpreten?: string | null;
      "Interpret 2"?: string | null;
      "Interpret 3"?: string | null;
      "Interpret 4"?: string | null;
      "Interpret 5"?: string | null;
      "Interpret 6"?: string | null;
      Label?: string | null;
      Verlag?: string | null;
      Verlagsort?: string | null;
      Verlagsreihe?: string | null;
      Verlagsnummer?: string | null;
      "Plattennr."?: string | null;
      Herkunft?: string | null;
      Gattung?: string | null;
      Widmung?: string | null;
      Sammlungen?: string | null;
      Kritik?: string | null;
      Ergänzung?: string | null;
      Quelle?: string | null;
      Index?: string | null;
    };
    "list-city": {
      results?: number;
      records?: {
        id?: number;
        name?: string | null;
      }[];
    };
    "read-city": {
      id?: number;
      name?: string | null;
    };
    "list-collection": {
      results?: number;
      records?: {
        id?: number;
        name?: string | null;
      }[];
    };
    "read-collection": {
      id?: number;
      name?: string | null;
    };
    "list-genre": {
      results?: number;
      records?: {
        id?: number;
        name?: string | null;
      }[];
    };
    "read-genre": {
      id?: number;
      name?: string | null;
    };
    "list-person": {
      results?: number;
      records?: {
        id?: number;
        name?: string | null;
      }[];
    };
    "read-person": {
      id?: number;
      name?: string | null;
    };
    "list-publisher": {
      results?: number;
      records?: {
        id?: number;
        name?: string | null;
      }[];
    };
    "read-publisher": {
      id?: number;
      name?: string | null;
    };
    "list-song": {
      results?: number;
      records?: {
        id?: number;
        name?: string | null;
        copyright_year?: string | null;
        copyright_remark?: string | null;
        created_on?: string | null;
        label?: string | null;
        publisher_series?: string | null;
        publisher_number?: string | null;
        record_number?: string | null;
        origin?: string | null;
        dedication?: string | null;
        review?: string | null;
        addition?: string | null;
        index_no?: string | null;
      }[];
    };
    "read-song": {
      id?: number;
      name?: string | null;
      copyright_year?: string | null;
      copyright_remark?: string | null;
      created_on?: string | null;
      label?: string | null;
      publisher_series?: string | null;
      publisher_number?: string | null;
      record_number?: string | null;
      origin?: string | null;
      dedication?: string | null;
      review?: string | null;
      addition?: string | null;
      index_no?: string | null;
    };
    "list-source": {
      results?: number;
      records?: {
        id?: number;
        name?: string | null;
      }[];
    };
    "read-source": {
      id?: number;
      name?: string | null;
    };
    "list-x_collection_song": {
      results?: number;
      records?: {
        song_id?: number;
        collection_id?: number;
        position?: number | null;
        annotation?: string | null;
      }[];
    };
    "list-x_composer_song": {
      results?: number;
      records?: {
        song_id?: number;
        composer_id?: number;
        position?: number | null;
        annotation?: string | null;
      }[];
    };
    "list-x_cover_artist_song": {
      results?: number;
      records?: {
        song_id?: number;
        cover_artist_id?: number;
        position?: number | null;
        annotation?: string | null;
      }[];
    };
    "list-x_genre_song": {
      results?: number;
      records?: {
        song_id?: number;
        genre_id?: number;
        position?: number | null;
        annotation?: string | null;
      }[];
    };
    "list-x_performer_song": {
      results?: number;
      records?: {
        song_id?: number;
        performer_id?: number;
        position?: number | null;
        annotation?: string | null;
      }[];
    };
    "list-x_publication_place_song": {
      results?: number;
      records?: {
        song_id?: number;
        publication_place_id?: number;
        position?: number | null;
        annotation?: string | null;
      }[];
    };
    "list-x_publisher_song": {
      results?: number;
      records?: {
        song_id?: number;
        publisher_id?: number;
        position?: number | null;
        annotation?: string | null;
      }[];
    };
    "list-x_source_song": {
      results?: number;
      records?: {
        song_id?: number;
        source_id?: number;
        position?: number | null;
        annotation?: string | null;
      }[];
    };
    "list-x_writer_song": {
      results?: number;
      records?: {
        song_id?: number;
        writer_id?: number;
        position?: number | null;
        annotation?: string | null;
      }[];
    };
    "ping-status": {
      db: number;
      cache: number;
    };
  };
  responses: {
    /** inserted primary key value (integer) */
    pk_integer: {
      content: {
        "application/json": number;
      };
    };
    /** inserted primary key value (string) */
    pk_string: {
      content: {
        "application/json": string;
      };
    };
    /** number of rows affected (integer) */
    rows_affected: {
      content: {
        "application/json": number;
      };
    };
    /** list of 20201217-oeaw-schlager-db records */
    "list-20201217-oeaw-schlager-db": {
      content: {
        "application/json": components["schemas"]["list-20201217-oeaw-schlager-db"];
      };
    };
    /** single 20201217-oeaw-schlager-db record */
    "read-20201217-oeaw-schlager-db": {
      content: {
        "application/json": components["schemas"]["read-20201217-oeaw-schlager-db"];
      };
    };
    /** list of city records */
    "list-city": {
      content: {
        "application/json": components["schemas"]["list-city"];
      };
    };
    /** single city record */
    "read-city": {
      content: {
        "application/json": components["schemas"]["read-city"];
      };
    };
    /** list of collection records */
    "list-collection": {
      content: {
        "application/json": components["schemas"]["list-collection"];
      };
    };
    /** single collection record */
    "read-collection": {
      content: {
        "application/json": components["schemas"]["read-collection"];
      };
    };
    /** list of genre records */
    "list-genre": {
      content: {
        "application/json": components["schemas"]["list-genre"];
      };
    };
    /** single genre record */
    "read-genre": {
      content: {
        "application/json": components["schemas"]["read-genre"];
      };
    };
    /** list of person records */
    "list-person": {
      content: {
        "application/json": components["schemas"]["list-person"];
      };
    };
    /** single person record */
    "read-person": {
      content: {
        "application/json": components["schemas"]["read-person"];
      };
    };
    /** list of publisher records */
    "list-publisher": {
      content: {
        "application/json": components["schemas"]["list-publisher"];
      };
    };
    /** single publisher record */
    "read-publisher": {
      content: {
        "application/json": components["schemas"]["read-publisher"];
      };
    };
    /** list of song records */
    "list-song": {
      content: {
        "application/json": components["schemas"]["list-song"];
      };
    };
    /** single song record */
    "read-song": {
      content: {
        "application/json": components["schemas"]["read-song"];
      };
    };
    /** list of source records */
    "list-source": {
      content: {
        "application/json": components["schemas"]["list-source"];
      };
    };
    /** single source record */
    "read-source": {
      content: {
        "application/json": components["schemas"]["read-source"];
      };
    };
    /** list of x_collection_song records */
    "list-x_collection_song": {
      content: {
        "application/json": components["schemas"]["list-x_collection_song"];
      };
    };
    /** list of x_composer_song records */
    "list-x_composer_song": {
      content: {
        "application/json": components["schemas"]["list-x_composer_song"];
      };
    };
    /** list of x_cover_artist_song records */
    "list-x_cover_artist_song": {
      content: {
        "application/json": components["schemas"]["list-x_cover_artist_song"];
      };
    };
    /** list of x_genre_song records */
    "list-x_genre_song": {
      content: {
        "application/json": components["schemas"]["list-x_genre_song"];
      };
    };
    /** list of x_performer_song records */
    "list-x_performer_song": {
      content: {
        "application/json": components["schemas"]["list-x_performer_song"];
      };
    };
    /** list of x_publication_place_song records */
    "list-x_publication_place_song": {
      content: {
        "application/json": components["schemas"]["list-x_publication_place_song"];
      };
    };
    /** list of x_publisher_song records */
    "list-x_publisher_song": {
      content: {
        "application/json": components["schemas"]["list-x_publisher_song"];
      };
    };
    /** list of x_source_song records */
    "list-x_source_song": {
      content: {
        "application/json": components["schemas"]["list-x_source_song"];
      };
    };
    /** list of x_writer_song records */
    "list-x_writer_song": {
      content: {
        "application/json": components["schemas"]["list-x_writer_song"];
      };
    };
    /** ping status record */
    "ping-status": {
      content: {
        "application/json": components["schemas"]["ping-status"];
      };
    };
  };
  parameters: {
    /** primary key value */
    pk: string;
    /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
    filter: string[];
    /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
    include: string;
    /** Columns you want to exclude from the output (comma separated). Example: posts.content */
    exclude: string;
    /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
    order: string[];
    /** Maximum number of results (for top lists). Example: 10 */
    size: string;
    /** Page number and page size (comma separated). Example: 1,10 */
    page: string;
    /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
    join: string[];
  };
}

export interface operations {
  /** list 20201217-oeaw-schlager-db */
  "list_20201217-oeaw-schlager-db": {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-20201217-oeaw-schlager-db"];
    };
  };
  /** read 20201217-oeaw-schlager-db */
  "read_20201217-oeaw-schlager-db": {
    parameters: {
      path: {
        /** primary key value */
        id: components["parameters"]["pk"];
      };
      query: {
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["read-20201217-oeaw-schlager-db"];
    };
  };
  /** list city */
  list_city: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-city"];
    };
  };
  /** read city */
  read_city: {
    parameters: {
      path: {
        /** primary key value */
        id: components["parameters"]["pk"];
      };
      query: {
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["read-city"];
    };
  };
  /** list collection */
  list_collection: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-collection"];
    };
  };
  /** read collection */
  read_collection: {
    parameters: {
      path: {
        /** primary key value */
        id: components["parameters"]["pk"];
      };
      query: {
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["read-collection"];
    };
  };
  /** list genre */
  list_genre: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-genre"];
    };
  };
  /** read genre */
  read_genre: {
    parameters: {
      path: {
        /** primary key value */
        id: components["parameters"]["pk"];
      };
      query: {
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["read-genre"];
    };
  };
  /** list person */
  list_person: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-person"];
    };
  };
  /** read person */
  read_person: {
    parameters: {
      path: {
        /** primary key value */
        id: components["parameters"]["pk"];
      };
      query: {
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["read-person"];
    };
  };
  /** list publisher */
  list_publisher: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-publisher"];
    };
  };
  /** read publisher */
  read_publisher: {
    parameters: {
      path: {
        /** primary key value */
        id: components["parameters"]["pk"];
      };
      query: {
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["read-publisher"];
    };
  };
  /** list song */
  list_song: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-song"];
    };
  };
  /** read song */
  read_song: {
    parameters: {
      path: {
        /** primary key value */
        id: components["parameters"]["pk"];
      };
      query: {
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["read-song"];
    };
  };
  /** list source */
  list_source: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-source"];
    };
  };
  /** read source */
  read_source: {
    parameters: {
      path: {
        /** primary key value */
        id: components["parameters"]["pk"];
      };
      query: {
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["read-source"];
    };
  };
  /** list x_collection_song */
  list_x_collection_song: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-x_collection_song"];
    };
  };
  /** list x_composer_song */
  list_x_composer_song: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-x_composer_song"];
    };
  };
  /** list x_cover_artist_song */
  list_x_cover_artist_song: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-x_cover_artist_song"];
    };
  };
  /** list x_genre_song */
  list_x_genre_song: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-x_genre_song"];
    };
  };
  /** list x_performer_song */
  list_x_performer_song: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-x_performer_song"];
    };
  };
  /** list x_publication_place_song */
  list_x_publication_place_song: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-x_publication_place_song"];
    };
  };
  /** list x_publisher_song */
  list_x_publisher_song: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-x_publisher_song"];
    };
  };
  /** list x_source_song */
  list_x_source_song: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-x_source_song"];
    };
  };
  /** list x_writer_song */
  list_x_writer_song: {
    parameters: {
      query: {
        /** Filters to be applied. Each filter consists of a column, an operator and a value (comma separated). Example: id,eq,1 */
        filter?: components["parameters"]["filter"];
        /** Columns you want to include in the output (comma separated). Example: posts.*,categories.name */
        include?: components["parameters"]["include"];
        /** Columns you want to exclude from the output (comma separated). Example: posts.content */
        exclude?: components["parameters"]["exclude"];
        /** Column you want to sort on and the sort direction (comma separated). Example: id,desc */
        order?: components["parameters"]["order"];
        /** Maximum number of results (for top lists). Example: 10 */
        size?: components["parameters"]["size"];
        /** Page number and page size (comma separated). Example: 1,10 */
        page?: components["parameters"]["page"];
        /** Paths (comma separated) to related entities that you want to include. Example: comments,users */
        join?: components["parameters"]["join"];
      };
    };
    responses: {
      200: components["responses"]["list-x_writer_song"];
    };
  };
  /** Request API 'ping' status */
  ping_status: {
    responses: {
      200: components["responses"]["ping-status"];
    };
  };
}

export interface external {}
